/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.codescanner;

import com.google.mlkit.vision.barcode.common.Barcode;
import com.google.mlkit.vision.codescanner.GmsBarcodeScanner;
import com.google.mlkit.vision.codescanner.GmsBarcodeScannerOptions;
import com.google.mlkit.vision.codescanner.GmsBarcodeScanning;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;


@Kroll.module(name = "TiCodescanner", id = "ti.codescanner")
public class TiCodescannerModule extends KrollModule {

    @Kroll.constant
    public static final int FORMAT_UNKNOWN = Barcode.FORMAT_UNKNOWN;
    @Kroll.constant
    public static final int FORMAT_ALL_FORMATS = Barcode.FORMAT_ALL_FORMATS;
    @Kroll.constant
    public static final int FORMAT_CODE_128 = Barcode.FORMAT_CODE_128;
    @Kroll.constant
    public static final int FORMAT_CODE_39 = Barcode.FORMAT_CODE_39;
    @Kroll.constant
    public static final int FORMAT_CODE_93 = Barcode.FORMAT_CODE_93;
    @Kroll.constant
    public static final int FORMAT_CODABAR = Barcode.FORMAT_CODABAR;
    @Kroll.constant
    public static final int FORMAT_DATA_MATRIX = Barcode.FORMAT_DATA_MATRIX;
    @Kroll.constant
    public static final int FORMAT_EAN_13 = Barcode.FORMAT_EAN_13;
    @Kroll.constant
    public static final int FORMAT_EAN_8 = Barcode.FORMAT_EAN_8;
    @Kroll.constant
    public static final int FORMAT_ITF = Barcode.FORMAT_ITF;
    @Kroll.constant
    public static final int FORMAT_QR_CODE = Barcode.FORMAT_QR_CODE;
    @Kroll.constant
    public static final int FORMAT_UPC_A = Barcode.FORMAT_UPC_A;
    @Kroll.constant
    public static final int FORMAT_UPC_E = Barcode.FORMAT_UPC_E;
    @Kroll.constant
    public static final int FORMAT_PDF417 = Barcode.FORMAT_PDF417;
    @Kroll.constant
    public static final int FORMAT_AZTEC = Barcode.FORMAT_AZTEC;


    // Standard Debugging variables
    private static final String LCAT = "TiCodescannerModule";

    public TiCodescannerModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void scan(@Kroll.argument(optional = true) KrollDict opts) {
        GmsBarcodeScanner scanner = null;
        if (opts != null) {
            GmsBarcodeScannerOptions.Builder buildOptions = new GmsBarcodeScannerOptions.Builder();
            if (opts.containsKeyAndNotNull("autoZoom") && opts.getBoolean("autoZoom")) {
                buildOptions.enableAutoZoom();
            }

            if (opts.containsKeyAndNotNull("formats")) {
                int[] formats = opts.getIntArray("formats");
                buildOptions.setBarcodeFormats(formats[0], formats);
            }

            scanner = GmsBarcodeScanning.getClient(TiApplication.getAppCurrentActivity(), buildOptions.build());
        }

        if (scanner == null) {
            scanner = GmsBarcodeScanning.getClient(TiApplication.getAppCurrentActivity());
        }
        scanner.startScan().addOnSuccessListener(
                        barcode -> {
                            String rawValue = barcode.getRawValue();
                            KrollDict kd = new KrollDict();
                            kd.put("value", rawValue);
                            fireEvent("complete", kd);
                        })
                .addOnFailureListener(
                        e -> {
                            KrollDict kd = new KrollDict();
                            kd.put("message", e.getMessage());
                            fireEvent("error", kd);
                        })
                .addOnCanceledListener(
                        () -> {
                            KrollDict kd = new KrollDict();
                            kd.put("message", "");
                            fireEvent("cancel", kd);
                        });

    }
}
